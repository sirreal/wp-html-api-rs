#![allow(non_camel_case_types)]

use std::{fmt::Display, rc::Rc};

use crate::tag_processor::ParsingNamespace;

#[derive(Debug, Clone)]
pub enum TagName {
    A,
    ADDRESS,
    APPLET,
    AREA,
    ARTICLE,
    ASIDE,
    B,
    BASE,
    BASEFONT,
    BGSOUND,
    BIG,
    BLOCKQUOTE,
    BODY,
    BR,
    BUTTON,
    CAPTION,
    CENTER,
    CODE,
    COL,
    COLGROUP,
    DD,
    DETAILS,
    DIALOG,
    DIR,
    DIV,
    DL,
    DT,
    EM,
    EMBED,
    FIELDSET,
    FIGCAPTION,
    FIGURE,
    FONT,
    FOOTER,
    FORM,
    FRAME,
    FRAMESET,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6,
    HEAD,
    HEADER,
    HGROUP,
    HR,
    HTML,
    I,
    IFRAME,
    IMG,
    INPUT,
    KEYGEN,
    LI,
    LINK,
    LISTING,
    MAIN,
    MARQUEE,
    MENU,
    META,
    NAV,
    NOBR,
    NOEMBED,
    NOFRAMES,
    NOSCRIPT,
    OBJECT,
    OL,
    OPTGROUP,
    OPTION,
    P,
    PARAM,
    PLAINTEXT,
    PRE,
    RB,
    RP,
    RT,
    RTC,
    RUBY,
    S,
    SCRIPT,
    SEARCH,
    SECTION,
    SELECT,
    SMALL,
    SOURCE,
    SPAN,
    STRIKE,
    STRONG,
    STYLE,
    SUB,
    SUMMARY,
    SUP,
    TABLE,
    TBODY,
    TD,
    TEMPLATE,
    TEXTAREA,
    TFOOT,
    TH,
    THEAD,
    TITLE,
    TR,
    TRACK,
    TT,
    U,
    UL,
    VAR,
    WBR,
    XMP,

    // MathML tags we're interested in
    // @todo add arbitrary mathml tag
    MATH,
    ANNOTATION_XML,
    MALIGNMARK,
    MGLYPH,
    MI,
    MN,
    MO,
    MS,
    MTEXT,

    // SVG tags we're interested in
    // @todo add arbitrary svg tag
    SVG,
    FOREIGNOBJECT,
    DESC,

    // Arbitrary tag names not listed here, e.g. <custom-tag>
    Arbitrary(Rc<[u8]>),
}

impl TagName {
    pub fn qualified_name(&self, ns: &ParsingNamespace) -> Box<[u8]> {
        match ns {
            ParsingNamespace::Html => self.into(),
            ParsingNamespace::MathML => {
                let s: Box<[u8]> = self.into();
                let lower = s.to_ascii_lowercase();
                lower.into()
            }
            ParsingNamespace::Svg => {
                let s: Box<[u8]> = self.into();
                let lower = s.to_ascii_lowercase();

                match lower.as_slice() {
                    b"altglyph" => b"altGlyph".as_slice(),
                    b"altglyphdef" => b"altGlyphDef",
                    b"altglyphitem" => b"altGlyphItem",
                    b"animatecolor" => b"animateColor",
                    b"animatemotion" => b"animateMotion",
                    b"animatetransform" => b"animateTransform",
                    b"clippath" => b"clipPath",
                    b"feblend" => b"feBlend",
                    b"fecolormatrix" => b"feColorMatrix",
                    b"fecomponenttransfer" => b"feComponentTransfer",
                    b"fecomposite" => b"feComposite",
                    b"feconvolvematrix" => b"feConvolveMatrix",
                    b"fediffuselighting" => b"feDiffuseLighting",
                    b"fedisplacementmap" => b"feDisplacementMap",
                    b"fedistantlight" => b"feDistantLight",
                    b"fedropshadow" => b"feDropShadow",
                    b"feflood" => b"feFlood",
                    b"fefunca" => b"feFuncA",
                    b"fefuncb" => b"feFuncB",
                    b"fefuncg" => b"feFuncG",
                    b"fefuncr" => b"feFuncR",
                    b"fegaussianblur" => b"feGaussianBlur",
                    b"feimage" => b"feImage",
                    b"femerge" => b"feMerge",
                    b"femergenode" => b"feMergeNode",
                    b"femorphology" => b"feMorphology",
                    b"feoffset" => b"feOffset",
                    b"fepointlight" => b"fePointLight",
                    b"fespecularlighting" => b"feSpecularLighting",
                    b"fespotlight" => b"feSpotLight",
                    b"fetile" => b"feTile",
                    b"feturbulence" => b"feTurbulence",
                    b"foreignobject" => b"foreignObject",
                    b"glyphref" => b"glyphRef",
                    b"lineargradient" => b"linearGradient",
                    b"radialgradient" => b"radialGradient",
                    b"textpath" => b"textPath",
                    otherwise => otherwise,
                }
                .into()
            }
        }
    }
}

impl From<&[u8]> for TagName {
    fn from(value: &[u8]) -> Self {
        let upper_cased = value.to_ascii_uppercase();
        match upper_cased.as_slice() {
            b"A" => Self::A,
            b"ADDRESS" => Self::ADDRESS,
            b"APPLET" => Self::APPLET,
            b"AREA" => Self::AREA,
            b"ARTICLE" => Self::ARTICLE,
            b"ASIDE" => Self::ASIDE,
            b"B" => Self::B,
            b"BASE" => Self::BASE,
            b"BASEFONT" => Self::BASEFONT,
            b"BGSOUND" => Self::BGSOUND,
            b"BIG" => Self::BIG,
            b"BLOCKQUOTE" => Self::BLOCKQUOTE,
            b"BODY" => Self::BODY,
            b"BR" => Self::BR,
            b"BUTTON" => Self::BUTTON,
            b"CAPTION" => Self::CAPTION,
            b"CENTER" => Self::CENTER,
            b"CODE" => Self::CODE,
            b"COL" => Self::COL,
            b"COLGROUP" => Self::COLGROUP,
            b"DD" => Self::DD,
            b"DETAILS" => Self::DETAILS,
            b"DIALOG" => Self::DIALOG,
            b"DIR" => Self::DIR,
            b"DIV" => Self::DIV,
            b"DL" => Self::DL,
            b"DT" => Self::DT,
            b"EM" => Self::EM,
            b"EMBED" => Self::EMBED,
            b"FIELDSET" => Self::FIELDSET,
            b"FIGCAPTION" => Self::FIGCAPTION,
            b"FIGURE" => Self::FIGURE,
            b"FONT" => Self::FONT,
            b"FOOTER" => Self::FOOTER,
            b"FORM" => Self::FORM,
            b"FRAME" => Self::FRAME,
            b"FRAMESET" => Self::FRAMESET,
            b"H1" => Self::H1,
            b"H2" => Self::H2,
            b"H3" => Self::H3,
            b"H4" => Self::H4,
            b"H5" => Self::H5,
            b"H6" => Self::H6,
            b"HEAD" => Self::HEAD,
            b"HEADER" => Self::HEADER,
            b"HGROUP" => Self::HGROUP,
            b"HR" => Self::HR,
            b"HTML" => Self::HTML,
            b"I" => Self::I,
            b"IFRAME" => Self::IFRAME,
            b"IMAGE" => Self::IMG,
            b"IMG" => Self::IMG,
            b"INPUT" => Self::INPUT,
            b"KEYGEN" => Self::KEYGEN,
            b"LI" => Self::LI,
            b"LINK" => Self::LINK,
            b"LISTING" => Self::LISTING,
            b"MAIN" => Self::MAIN,
            b"MARQUEE" => Self::MARQUEE,
            b"MENU" => Self::MENU,
            b"META" => Self::META,
            b"NAV" => Self::NAV,
            b"NOBR" => Self::NOBR,
            b"NOEMBED" => Self::NOEMBED,
            b"NOFRAMES" => Self::NOFRAMES,
            b"NOSCRIPT" => Self::NOSCRIPT,
            b"OBJECT" => Self::OBJECT,
            b"OL" => Self::OL,
            b"OPTGROUP" => Self::OPTGROUP,
            b"OPTION" => Self::OPTION,
            b"P" => Self::P,
            b"PARAM" => Self::PARAM,
            b"PLAINTEXT" => Self::PLAINTEXT,
            b"PRE" => Self::PRE,
            b"RB" => Self::RB,
            b"RP" => Self::RP,
            b"RT" => Self::RT,
            b"RTC" => Self::RTC,
            b"RUBY" => Self::RUBY,
            b"S" => Self::S,
            b"SCRIPT" => Self::SCRIPT,
            b"SEARCH" => Self::SEARCH,
            b"SECTION" => Self::SECTION,
            b"SELECT" => Self::SELECT,
            b"SMALL" => Self::SMALL,
            b"SOURCE" => Self::SOURCE,
            b"SPAN" => Self::SPAN,
            b"STRIKE" => Self::STRIKE,
            b"STRONG" => Self::STRONG,
            b"STYLE" => Self::STYLE,
            b"SUB" => Self::SUB,
            b"SUMMARY" => Self::SUMMARY,
            b"SUP" => Self::SUP,
            b"TABLE" => Self::TABLE,
            b"TBODY" => Self::TBODY,
            b"TD" => Self::TD,
            b"TEMPLATE" => Self::TEMPLATE,
            b"TEXTAREA" => Self::TEXTAREA,
            b"TFOOT" => Self::TFOOT,
            b"TH" => Self::TH,
            b"THEAD" => Self::THEAD,
            b"TITLE" => Self::TITLE,
            b"TR" => Self::TR,
            b"TRACK" => Self::TRACK,
            b"TT" => Self::TT,
            b"U" => Self::U,
            b"UL" => Self::UL,
            b"VAR" => Self::VAR,
            b"WBR" => Self::WBR,
            b"XMP" => Self::XMP,

            b"SVG" => Self::SVG,
            b"DESC" => Self::DESC,
            b"FOREIGNOBJECT" => Self::FOREIGNOBJECT,

            b"MATH" => Self::MATH,
            b"ANNOTATION-XML" => Self::ANNOTATION_XML,
            b"MALIGNMARK" => Self::MALIGNMARK,
            b"MGLYPH" => Self::MGLYPH,
            b"MI" => Self::MI,
            b"MN" => Self::MN,
            b"MO" => Self::MO,
            b"MS" => Self::MS,
            b"MTEXT" => Self::MTEXT,

            _ => Self::Arbitrary(value.into()),
        }
    }
}

impl Into<Box<[u8]>> for TagName {
    fn into(self) -> Box<[u8]> {
        (&self).into()
    }
}

impl Into<Box<[u8]>> for &TagName {
    fn into(self) -> Box<[u8]> {
        match self {
            TagName::A => b"A".as_slice(),
            TagName::ADDRESS => b"ADDRESS".as_slice(),
            TagName::APPLET => b"APPLET".as_slice(),
            TagName::AREA => b"AREA".as_slice(),
            TagName::ARTICLE => b"ARTICLE".as_slice(),
            TagName::ASIDE => b"ASIDE".as_slice(),
            TagName::B => b"B".as_slice(),
            TagName::BASE => b"BASE".as_slice(),
            TagName::BASEFONT => b"BASEFONT".as_slice(),
            TagName::BGSOUND => b"BGSOUND".as_slice(),
            TagName::BIG => b"BIG".as_slice(),
            TagName::BLOCKQUOTE => b"BLOCKQUOTE".as_slice(),
            TagName::BODY => b"BODY".as_slice(),
            TagName::BR => b"BR".as_slice(),
            TagName::BUTTON => b"BUTTON".as_slice(),
            TagName::CAPTION => b"CAPTION".as_slice(),
            TagName::CENTER => b"CENTER".as_slice(),
            TagName::CODE => b"CODE".as_slice(),
            TagName::COL => b"COL".as_slice(),
            TagName::COLGROUP => b"COLGROUP".as_slice(),
            TagName::DD => b"DD".as_slice(),
            TagName::DETAILS => b"DETAILS".as_slice(),
            TagName::DIALOG => b"DIALOG".as_slice(),
            TagName::DIR => b"DIR".as_slice(),
            TagName::DIV => b"DIV".as_slice(),
            TagName::DL => b"DL".as_slice(),
            TagName::DT => b"DT".as_slice(),
            TagName::EM => b"EM".as_slice(),
            TagName::EMBED => b"EMBED".as_slice(),
            TagName::FIELDSET => b"FIELDSET".as_slice(),
            TagName::FIGCAPTION => b"FIGCAPTION".as_slice(),
            TagName::FIGURE => b"FIGURE".as_slice(),
            TagName::FONT => b"FONT".as_slice(),
            TagName::FOOTER => b"FOOTER".as_slice(),
            TagName::FORM => b"FORM".as_slice(),
            TagName::FRAME => b"FRAME".as_slice(),
            TagName::FRAMESET => b"FRAMESET".as_slice(),
            TagName::H1 => b"H1".as_slice(),
            TagName::H2 => b"H2".as_slice(),
            TagName::H3 => b"H3".as_slice(),
            TagName::H4 => b"H4".as_slice(),
            TagName::H5 => b"H5".as_slice(),
            TagName::H6 => b"H6".as_slice(),
            TagName::HEAD => b"HEAD".as_slice(),
            TagName::HEADER => b"HEADER".as_slice(),
            TagName::HGROUP => b"HGROUP".as_slice(),
            TagName::HR => b"HR".as_slice(),
            TagName::HTML => b"HTML".as_slice(),
            TagName::I => b"I".as_slice(),
            TagName::IFRAME => b"IFRAME".as_slice(),
            TagName::IMG => b"IMG".as_slice(),
            TagName::INPUT => b"INPUT".as_slice(),
            TagName::KEYGEN => b"KEYGEN".as_slice(),
            TagName::LI => b"LI".as_slice(),
            TagName::LINK => b"LINK".as_slice(),
            TagName::LISTING => b"LISTING".as_slice(),
            TagName::MAIN => b"MAIN".as_slice(),
            TagName::MARQUEE => b"MARQUEE".as_slice(),
            TagName::MENU => b"MENU".as_slice(),
            TagName::META => b"META".as_slice(),
            TagName::NAV => b"NAV".as_slice(),
            TagName::NOBR => b"NOBR".as_slice(),
            TagName::NOEMBED => b"NOEMBED".as_slice(),
            TagName::NOFRAMES => b"NOFRAMES".as_slice(),
            TagName::NOSCRIPT => b"NOSCRIPT".as_slice(),
            TagName::OBJECT => b"OBJECT".as_slice(),
            TagName::OL => b"OL".as_slice(),
            TagName::OPTGROUP => b"OPTGROUP".as_slice(),
            TagName::OPTION => b"OPTION".as_slice(),
            TagName::P => b"P".as_slice(),
            TagName::PARAM => b"PARAM".as_slice(),
            TagName::PLAINTEXT => b"PLAINTEXT".as_slice(),
            TagName::PRE => b"PRE".as_slice(),
            TagName::RB => b"RB".as_slice(),
            TagName::RP => b"RP".as_slice(),
            TagName::RT => b"RT".as_slice(),
            TagName::RTC => b"RTC".as_slice(),
            TagName::RUBY => b"RUBY".as_slice(),
            TagName::S => b"S".as_slice(),
            TagName::SCRIPT => b"SCRIPT".as_slice(),
            TagName::SEARCH => b"SEARCH".as_slice(),
            TagName::SECTION => b"SECTION".as_slice(),
            TagName::SELECT => b"SELECT".as_slice(),
            TagName::SMALL => b"SMALL".as_slice(),
            TagName::SOURCE => b"SOURCE".as_slice(),
            TagName::SPAN => b"SPAN".as_slice(),
            TagName::STRIKE => b"STRIKE".as_slice(),
            TagName::STRONG => b"STRONG".as_slice(),
            TagName::STYLE => b"STYLE".as_slice(),
            TagName::SUB => b"SUB".as_slice(),
            TagName::SUMMARY => b"SUMMARY".as_slice(),
            TagName::SUP => b"SUP".as_slice(),
            TagName::TABLE => b"TABLE".as_slice(),
            TagName::TBODY => b"TBODY".as_slice(),
            TagName::TD => b"TD".as_slice(),
            TagName::TEMPLATE => b"TEMPLATE".as_slice(),
            TagName::TEXTAREA => b"TEXTAREA".as_slice(),
            TagName::TFOOT => b"TFOOT".as_slice(),
            TagName::TH => b"TH".as_slice(),
            TagName::THEAD => b"THEAD".as_slice(),
            TagName::TITLE => b"TITLE".as_slice(),
            TagName::TR => b"TR".as_slice(),
            TagName::TRACK => b"TRACK".as_slice(),
            TagName::TT => b"TT".as_slice(),
            TagName::U => b"U".as_slice(),
            TagName::UL => b"UL".as_slice(),
            TagName::VAR => b"VAR".as_slice(),
            TagName::WBR => b"WBR".as_slice(),
            TagName::XMP => b"XMP".as_slice(),

            TagName::MATH => b"MATH".as_slice(),
            TagName::ANNOTATION_XML => b"ANNOTATION-XML".as_slice(),
            TagName::MALIGNMARK => b"MALIGNMARK".as_slice(),
            TagName::MGLYPH => b"MGLYPH".as_slice(),
            TagName::MI => b"MI".as_slice(),
            TagName::MN => b"MN".as_slice(),
            TagName::MO => b"MO".as_slice(),
            TagName::MS => b"MS".as_slice(),
            TagName::MTEXT => b"MTEXT".as_slice(),

            TagName::SVG => b"SVG".as_slice(),
            TagName::DESC => b"DESC".as_slice(),
            TagName::FOREIGNOBJECT => b"FOREIGNOBJECT".as_slice(),

            TagName::Arbitrary(arbitrary_name) => return Box::from(arbitrary_name.as_ref()),
        }
        .into()
    }
}

impl PartialEq<Self> for TagName {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (TagName::A, TagName::A) => true,
            (TagName::ADDRESS, TagName::ADDRESS) => true,
            (TagName::APPLET, TagName::APPLET) => true,
            (TagName::AREA, TagName::AREA) => true,
            (TagName::ARTICLE, TagName::ARTICLE) => true,
            (TagName::ASIDE, TagName::ASIDE) => true,
            (TagName::B, TagName::B) => true,
            (TagName::BASE, TagName::BASE) => true,
            (TagName::BASEFONT, TagName::BASEFONT) => true,
            (TagName::BGSOUND, TagName::BGSOUND) => true,
            (TagName::BIG, TagName::BIG) => true,
            (TagName::BLOCKQUOTE, TagName::BLOCKQUOTE) => true,
            (TagName::BODY, TagName::BODY) => true,
            (TagName::BR, TagName::BR) => true,
            (TagName::BUTTON, TagName::BUTTON) => true,
            (TagName::CAPTION, TagName::CAPTION) => true,
            (TagName::CENTER, TagName::CENTER) => true,
            (TagName::CODE, TagName::CODE) => true,
            (TagName::COL, TagName::COL) => true,
            (TagName::COLGROUP, TagName::COLGROUP) => true,
            (TagName::DD, TagName::DD) => true,
            (TagName::DETAILS, TagName::DETAILS) => true,
            (TagName::DIALOG, TagName::DIALOG) => true,
            (TagName::DIR, TagName::DIR) => true,
            (TagName::DIV, TagName::DIV) => true,
            (TagName::DL, TagName::DL) => true,
            (TagName::DT, TagName::DT) => true,
            (TagName::EM, TagName::EM) => true,
            (TagName::EMBED, TagName::EMBED) => true,
            (TagName::FIELDSET, TagName::FIELDSET) => true,
            (TagName::FIGCAPTION, TagName::FIGCAPTION) => true,
            (TagName::FIGURE, TagName::FIGURE) => true,
            (TagName::FONT, TagName::FONT) => true,
            (TagName::FOOTER, TagName::FOOTER) => true,
            (TagName::FORM, TagName::FORM) => true,
            (TagName::FRAME, TagName::FRAME) => true,
            (TagName::FRAMESET, TagName::FRAMESET) => true,
            (TagName::H1, TagName::H1) => true,
            (TagName::H2, TagName::H2) => true,
            (TagName::H3, TagName::H3) => true,
            (TagName::H4, TagName::H4) => true,
            (TagName::H5, TagName::H5) => true,
            (TagName::H6, TagName::H6) => true,
            (TagName::HEAD, TagName::HEAD) => true,
            (TagName::HEADER, TagName::HEADER) => true,
            (TagName::HGROUP, TagName::HGROUP) => true,
            (TagName::HR, TagName::HR) => true,
            (TagName::HTML, TagName::HTML) => true,
            (TagName::I, TagName::I) => true,
            (TagName::IFRAME, TagName::IFRAME) => true,
            (TagName::IMG, TagName::IMG) => true,
            (TagName::INPUT, TagName::INPUT) => true,
            (TagName::KEYGEN, TagName::KEYGEN) => true,
            (TagName::LI, TagName::LI) => true,
            (TagName::LINK, TagName::LINK) => true,
            (TagName::LISTING, TagName::LISTING) => true,
            (TagName::MAIN, TagName::MAIN) => true,
            (TagName::MARQUEE, TagName::MARQUEE) => true,
            (TagName::MENU, TagName::MENU) => true,
            (TagName::META, TagName::META) => true,
            (TagName::NAV, TagName::NAV) => true,
            (TagName::NOBR, TagName::NOBR) => true,
            (TagName::NOEMBED, TagName::NOEMBED) => true,
            (TagName::NOFRAMES, TagName::NOFRAMES) => true,
            (TagName::NOSCRIPT, TagName::NOSCRIPT) => true,
            (TagName::OBJECT, TagName::OBJECT) => true,
            (TagName::OL, TagName::OL) => true,
            (TagName::OPTGROUP, TagName::OPTGROUP) => true,
            (TagName::OPTION, TagName::OPTION) => true,
            (TagName::P, TagName::P) => true,
            (TagName::PARAM, TagName::PARAM) => true,
            (TagName::PLAINTEXT, TagName::PLAINTEXT) => true,
            (TagName::PRE, TagName::PRE) => true,
            (TagName::RB, TagName::RB) => true,
            (TagName::RP, TagName::RP) => true,
            (TagName::RT, TagName::RT) => true,
            (TagName::RTC, TagName::RTC) => true,
            (TagName::RUBY, TagName::RUBY) => true,
            (TagName::S, TagName::S) => true,
            (TagName::SCRIPT, TagName::SCRIPT) => true,
            (TagName::SEARCH, TagName::SEARCH) => true,
            (TagName::SECTION, TagName::SECTION) => true,
            (TagName::SELECT, TagName::SELECT) => true,
            (TagName::SMALL, TagName::SMALL) => true,
            (TagName::SOURCE, TagName::SOURCE) => true,
            (TagName::SPAN, TagName::SPAN) => true,
            (TagName::STRIKE, TagName::STRIKE) => true,
            (TagName::STRONG, TagName::STRONG) => true,
            (TagName::STYLE, TagName::STYLE) => true,
            (TagName::SUB, TagName::SUB) => true,
            (TagName::SUMMARY, TagName::SUMMARY) => true,
            (TagName::SUP, TagName::SUP) => true,
            (TagName::TABLE, TagName::TABLE) => true,
            (TagName::TBODY, TagName::TBODY) => true,
            (TagName::TD, TagName::TD) => true,
            (TagName::TEMPLATE, TagName::TEMPLATE) => true,
            (TagName::TEXTAREA, TagName::TEXTAREA) => true,
            (TagName::TFOOT, TagName::TFOOT) => true,
            (TagName::TH, TagName::TH) => true,
            (TagName::THEAD, TagName::THEAD) => true,
            (TagName::TITLE, TagName::TITLE) => true,
            (TagName::TR, TagName::TR) => true,
            (TagName::TRACK, TagName::TRACK) => true,
            (TagName::TT, TagName::TT) => true,
            (TagName::U, TagName::U) => true,
            (TagName::UL, TagName::UL) => true,
            (TagName::VAR, TagName::VAR) => true,
            (TagName::WBR, TagName::WBR) => true,
            (TagName::XMP, TagName::XMP) => true,
            (TagName::MATH, TagName::MATH) => true,
            (TagName::ANNOTATION_XML, TagName::ANNOTATION_XML) => true,
            (TagName::MALIGNMARK, TagName::MALIGNMARK) => true,
            (TagName::MGLYPH, TagName::MGLYPH) => true,
            (TagName::MI, TagName::MI) => true,
            (TagName::MN, TagName::MN) => true,
            (TagName::MO, TagName::MO) => true,
            (TagName::MS, TagName::MS) => true,
            (TagName::MTEXT, TagName::MTEXT) => true,
            (TagName::SVG, TagName::SVG) => true,
            (TagName::FOREIGNOBJECT, TagName::FOREIGNOBJECT) => true,
            (TagName::DESC, TagName::DESC) => true,
            (TagName::Arbitrary(a), TagName::Arbitrary(b)) => a.eq_ignore_ascii_case(b),

            // List cases instead of a single catch-all to ensure new tags are handled correctly.
            (TagName::A, _) => false,
            (TagName::ADDRESS, _) => false,
            (TagName::APPLET, _) => false,
            (TagName::AREA, _) => false,
            (TagName::ARTICLE, _) => false,
            (TagName::ASIDE, _) => false,
            (TagName::B, _) => false,
            (TagName::BASE, _) => false,
            (TagName::BASEFONT, _) => false,
            (TagName::BGSOUND, _) => false,
            (TagName::BIG, _) => false,
            (TagName::BLOCKQUOTE, _) => false,
            (TagName::BODY, _) => false,
            (TagName::BR, _) => false,
            (TagName::BUTTON, _) => false,
            (TagName::CAPTION, _) => false,
            (TagName::CENTER, _) => false,
            (TagName::CODE, _) => false,
            (TagName::COL, _) => false,
            (TagName::COLGROUP, _) => false,
            (TagName::DD, _) => false,
            (TagName::DETAILS, _) => false,
            (TagName::DIALOG, _) => false,
            (TagName::DIR, _) => false,
            (TagName::DIV, _) => false,
            (TagName::DL, _) => false,
            (TagName::DT, _) => false,
            (TagName::EM, _) => false,
            (TagName::EMBED, _) => false,
            (TagName::FIELDSET, _) => false,
            (TagName::FIGCAPTION, _) => false,
            (TagName::FIGURE, _) => false,
            (TagName::FONT, _) => false,
            (TagName::FOOTER, _) => false,
            (TagName::FORM, _) => false,
            (TagName::FRAME, _) => false,
            (TagName::FRAMESET, _) => false,
            (TagName::H1, _) => false,
            (TagName::H2, _) => false,
            (TagName::H3, _) => false,
            (TagName::H4, _) => false,
            (TagName::H5, _) => false,
            (TagName::H6, _) => false,
            (TagName::HEAD, _) => false,
            (TagName::HEADER, _) => false,
            (TagName::HGROUP, _) => false,
            (TagName::HR, _) => false,
            (TagName::HTML, _) => false,
            (TagName::I, _) => false,
            (TagName::IFRAME, _) => false,
            (TagName::IMG, _) => false,
            (TagName::INPUT, _) => false,
            (TagName::KEYGEN, _) => false,
            (TagName::LI, _) => false,
            (TagName::LINK, _) => false,
            (TagName::LISTING, _) => false,
            (TagName::MAIN, _) => false,
            (TagName::MARQUEE, _) => false,
            (TagName::MENU, _) => false,
            (TagName::META, _) => false,
            (TagName::NAV, _) => false,
            (TagName::NOBR, _) => false,
            (TagName::NOEMBED, _) => false,
            (TagName::NOFRAMES, _) => false,
            (TagName::NOSCRIPT, _) => false,
            (TagName::OBJECT, _) => false,
            (TagName::OL, _) => false,
            (TagName::OPTGROUP, _) => false,
            (TagName::OPTION, _) => false,
            (TagName::P, _) => false,
            (TagName::PARAM, _) => false,
            (TagName::PLAINTEXT, _) => false,
            (TagName::PRE, _) => false,
            (TagName::RB, _) => false,
            (TagName::RP, _) => false,
            (TagName::RT, _) => false,
            (TagName::RTC, _) => false,
            (TagName::RUBY, _) => false,
            (TagName::S, _) => false,
            (TagName::SCRIPT, _) => false,
            (TagName::SEARCH, _) => false,
            (TagName::SECTION, _) => false,
            (TagName::SELECT, _) => false,
            (TagName::SMALL, _) => false,
            (TagName::SOURCE, _) => false,
            (TagName::SPAN, _) => false,
            (TagName::STRIKE, _) => false,
            (TagName::STRONG, _) => false,
            (TagName::STYLE, _) => false,
            (TagName::SUB, _) => false,
            (TagName::SUMMARY, _) => false,
            (TagName::SUP, _) => false,
            (TagName::TABLE, _) => false,
            (TagName::TBODY, _) => false,
            (TagName::TD, _) => false,
            (TagName::TEMPLATE, _) => false,
            (TagName::TEXTAREA, _) => false,
            (TagName::TFOOT, _) => false,
            (TagName::TH, _) => false,
            (TagName::THEAD, _) => false,
            (TagName::TITLE, _) => false,
            (TagName::TR, _) => false,
            (TagName::TRACK, _) => false,
            (TagName::TT, _) => false,
            (TagName::U, _) => false,
            (TagName::UL, _) => false,
            (TagName::VAR, _) => false,
            (TagName::WBR, _) => false,
            (TagName::XMP, _) => false,
            (TagName::MATH, _) => false,
            (TagName::ANNOTATION_XML, _) => false,
            (TagName::MALIGNMARK, _) => false,
            (TagName::MGLYPH, _) => false,
            (TagName::MI, _) => false,
            (TagName::MN, _) => false,
            (TagName::MO, _) => false,
            (TagName::MS, _) => false,
            (TagName::MTEXT, _) => false,
            (TagName::SVG, _) => false,
            (TagName::FOREIGNOBJECT, _) => false,
            (TagName::DESC, _) => false,
            (TagName::Arbitrary(_), _) => false,
        }
    }
}

impl Display for TagName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Arbitrary(name) => {
                write!(f, "Arbitrary({})", String::from_utf8_lossy(name))
            }
            _ => write!(f, "{:?}", self),
        }
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_tag_name_eq() {
        assert_eq!(TagName::A, TagName::A);
        assert_eq!(TagName::CAPTION, TagName::CAPTION);
        assert_eq!(TagName::UL, TagName::UL);
        assert_eq!(TagName::VAR, TagName::VAR);

        assert_ne!(TagName::A, TagName::ADDRESS);
        assert_ne!(TagName::B, TagName::I);
        assert_ne!(TagName::SVG, TagName::MATH);
    }

    #[test]
    fn test_tag_name_eq_arbitrary() {
        fn make_names(a: &str, b: &str) -> (TagName, TagName) {
            (a.as_bytes().into(), b.as_bytes().into())
        }

        let (a, b) = make_names("FOO", "foo");
        assert_eq!(a, b);
        let (a, b) = make_names("foo", "foo");
        assert_eq!(a, b);
        let (a, b) = make_names("foo-custom", "foo-custom");
        assert_eq!(a, b);

        let (a, b) = make_names("foo", "bar");
        assert_ne!(a, b);
        let (a, b) = make_names("foo", "foot");
        assert_ne!(a, b);
        let (a, b) = make_names("foot", "foo");
        assert_ne!(a, b);
        let (a, b) = make_names("foo-custom", "foo-custom-not");
        assert_ne!(a, b);
    }
}
